"""
Taken from timm: https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/weight_init.py
"""

import math
import torch
import warnings


def _no_grad_trunc_normal_(
        tensor: torch.Tensor,
        mean: float,
        std: float,
        a: float,
        b: float
) -> torch.Tensor:
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        # noinspection PyArgumentList
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(
        tensor: torch.Tensor,
        mean: float = 0.,
        std: float = 1.,
        a: float = -2.,
        b: float = 2.
) -> torch.Tensor:
    r"""Initialize tensor using truncated normal distribution.
    
    Fills the input tensor with values drawn from a truncated normal distribution,
    which is particularly useful for neural network weight initialization to prevent
    extreme values while maintaining approximately normal distribution properties.
    
    The values are drawn from :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within bounds.
    
    Args:
        tensor: The tensor to be initialized
        mean: The mean (μ) of the normal distribution, default 0.0
        std: The standard deviation (σ) of the normal distribution, default 1.0
        a: The minimum cutoff value, default -2.0
        b: The maximum cutoff value, default 2.0
        
    Returns:
        torch.Tensor: The initialized tensor
        
    Note:
        The method works best when :math:`a \leq \text{mean} \leq b` as this
        ensures efficient sampling from the truncated distribution.
        
    Example:
        >>> weight = torch.empty(3, 5)
        >>> trunc_normal_(weight, mean=0.0, std=0.02, a=-0.04, b=0.04)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)
